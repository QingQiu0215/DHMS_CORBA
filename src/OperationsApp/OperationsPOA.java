package OperationsApp;


/**
* OperationsApp/OperationsPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from Operations.idl
* Tuesday, November 5, 2019 6:29:05 o'clock PM EST
*/

public abstract class OperationsPOA extends org.omg.PortableServer.Servant
 implements OperationsApp.OperationsOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("writeTxtClient", new java.lang.Integer (0));
    _methods.put ("writeTxtServerMTL", new java.lang.Integer (1));
    _methods.put ("writeTxtServerQUE", new java.lang.Integer (2));
    _methods.put ("writeTxtServerSHE", new java.lang.Integer (3));
    _methods.put ("bookAppointment", new java.lang.Integer (4));
    _methods.put ("getAppointmentSchedule", new java.lang.Integer (5));
    _methods.put ("cancelAppointment", new java.lang.Integer (6));
    _methods.put ("swapAppointment", new java.lang.Integer (7));
    _methods.put ("addAppointment", new java.lang.Integer (8));
    _methods.put ("checkAppointmentExisted", new java.lang.Integer (9));
    _methods.put ("removeAppointment", new java.lang.Integer (10));
    _methods.put ("listAppointmentAvailability", new java.lang.Integer (11));
    _methods.put ("shutdown", new java.lang.Integer (12));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // OperationsApp/Operations/writeTxtClient
       {
         String clientID = in.read_string ();
         String task = in.read_string ();
         String resultStr = in.read_string ();
         this.writeTxtClient (clientID, task, resultStr);
         out = $rh.createReply();
         break;
       }

       case 1:  // OperationsApp/Operations/writeTxtServerMTL
       {
         String clientID = in.read_string ();
         String patientID = in.read_string ();
         String appointmentType = in.read_string ();
         String appointmentID = in.read_string ();
         String task = in.read_string ();
         String resultStr = in.read_string ();
         this.writeTxtServerMTL (clientID, patientID, appointmentType, appointmentID, task, resultStr);
         out = $rh.createReply();
         break;
       }

       case 2:  // OperationsApp/Operations/writeTxtServerQUE
       {
         String clientID = in.read_string ();
         String patientID = in.read_string ();
         String appointmentType = in.read_string ();
         String appointmentID = in.read_string ();
         String task = in.read_string ();
         String resultStr = in.read_string ();
         this.writeTxtServerQUE (clientID, patientID, appointmentType, appointmentID, task, resultStr);
         out = $rh.createReply();
         break;
       }

       case 3:  // OperationsApp/Operations/writeTxtServerSHE
       {
         String clientID = in.read_string ();
         String patientID = in.read_string ();
         String appointmentType = in.read_string ();
         String appointmentID = in.read_string ();
         String task = in.read_string ();
         String resultStr = in.read_string ();
         this.writeTxtServerSHE (clientID, patientID, appointmentType, appointmentID, task, resultStr);
         out = $rh.createReply();
         break;
       }

       case 4:  // OperationsApp/Operations/bookAppointment
       {
         String clientID = in.read_string ();
         String patientID = in.read_string ();
         String appointmentID = in.read_string ();
         String appointmentType = in.read_string ();
         String $result = null;
         $result = this.bookAppointment (clientID, patientID, appointmentID, appointmentType);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 5:  // OperationsApp/Operations/getAppointmentSchedule
       {
         String patientID = in.read_string ();
         String $result = null;
         $result = this.getAppointmentSchedule (patientID);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 6:  // OperationsApp/Operations/cancelAppointment
       {
         String clientID = in.read_string ();
         String patientID = in.read_string ();
         String appointmentID = in.read_string ();
         String appointmentType = in.read_string ();
         String $result = null;
         $result = this.cancelAppointment (clientID, patientID, appointmentID, appointmentType);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 7:  // OperationsApp/Operations/swapAppointment
       {
         String clientID = in.read_string ();
         String patientID = in.read_string ();
         String oldAppointmentID = in.read_string ();
         String oldAppointmentType = in.read_string ();
         String newAppointmentID = in.read_string ();
         String newAppointmentType = in.read_string ();
         String $result = null;
         $result = this.swapAppointment (clientID, patientID, oldAppointmentID, oldAppointmentType, newAppointmentID, newAppointmentType);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 8:  // OperationsApp/Operations/addAppointment
       {
         String appointmentID = in.read_string ();
         String appointmentType = in.read_string ();
         String capacity = in.read_string ();
         String appointmentWeekStr = in.read_string ();
         String $result = null;
         $result = this.addAppointment (appointmentID, appointmentType, capacity, appointmentWeekStr);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 9:  // OperationsApp/Operations/checkAppointmentExisted
       {
         String appointmentID = in.read_string ();
         String appointmentType = in.read_string ();
         boolean $result = false;
         $result = this.checkAppointmentExisted (appointmentID, appointmentType);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 10:  // OperationsApp/Operations/removeAppointment
       {
         String appointmentID = in.read_string ();
         String appointmentType = in.read_string ();
         String $result = null;
         $result = this.removeAppointment (appointmentID, appointmentType);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 11:  // OperationsApp/Operations/listAppointmentAvailability
       {
         String appointmentType = in.read_string ();
         String $result = null;
         $result = this.listAppointmentAvailability (appointmentType);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 12:  // OperationsApp/Operations/shutdown
       {
         this.shutdown ();
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:OperationsApp/Operations:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public Operations _this() 
  {
    return OperationsHelper.narrow(
    super._this_object());
  }

  public Operations _this(org.omg.CORBA.ORB orb) 
  {
    return OperationsHelper.narrow(
    super._this_object(orb));
  }


} // class OperationsPOA
